// import "imdb.malloy"


source: people is table('duckdb:names.parquet') {
// cast, crew, everyone involved in movies
  primary_key: nconst
}

source: principals is table('duckdb:principals.parquet') {
// a mapping table that links people to movies, along with their job on that movie.
  join_one: people is people on nconst = people.nconst
}

source: movies is table('duckdb:titles.parquet') + {
// all the movies
  join_many: principals on tconst = principals.tconst
  primary_key: tconst

  declare:
    title_count is count(distinct tconst)
    row_count is count()
    total_ratings is sum(ratings.numVotes/1000.0)
    average_rating is ratings.averageRating.avg()
    percent_of_titles is title_count/all(title_count)* 100

    movie_image is concat('https://artifacts.flyxit.com/flyx-artifacts/',tconst,'.jpg')
    movie_url is concat('https://www.imdb.com/title/',tconst)


  query: by_title is {
    group_by: primaryTitle, startYear, ratings.numVotes
    order_by: 3 desc
  }
  query: by_year is {
    group_by: startYear
    aggregate: title_count
    order_by: startYear desc
  }

  query: by_name is {
    group_by:
      principals.people.primaryName, principals.nconst
    aggregate:
      total_ratings
      title_count
  }
  query: by_job_category is {
    group_by: job_category is principals.category
    aggregate: title_count
  }

  query: by_genre is {
    group_by: genre is genres.value
    aggregate: 
      title_count, 
      total_ratings
      percent_of_titles is title_count/all(title_count)* 100

  }
  query: by_character is {
    group_by: principals.characters.value
    aggregate: title_count
  }

  query: by_year_and_genre is by_year + {
    nest: by_genre
  }

  query: titles_dashboard is {
    group_by: 
      movie_image
      production_year is startYear
      primaryTitle
      runtimeMinutes
      movie_url 
    nest:
      genre_list is by_genre
      by_cast is by_job_category {
        nest: by_name_list is by_name + {limit: 200}
      }
    limit: 20
    order_by: 2 desc
  }
}
source: movies2 is movies + {
  join_many: search is from(movies->{
    group_by: 
      tconst
      principals.people.primaryName
      genre is genres.value
  }) on tconst = search.tconst
  // --

  query: top_rated_by_genre is  {
    group_by: genre is genres.value
    aggregate: total_ratings
    nest: top_titles is by_title + { limit: 5 } 
    nest: top_names is by_name + { limit: 5 }
  }

  query: genre_crossproduct is {
    where: search.genre = 'Comedy'
    group_by: 
      search.genre
      genre2 is genres.value
    aggregate: total_ratings
    nest:  top_titles is by_title + { limit: 5 } 
    order_by: 1,2
  }

  query: who_works_with_who is {
    where: search.primaryName = 'Steven Spielberg'
    where: search.primaryName != principals.people.primaryName
    group_by: principals.people.primaryName
    aggregate: 
      title_count
      start_year is min(startYear)
      end_year is max(startYear)
    nest: by_job_category_list is by_job_category
    nest: top_titles_list is by_title
    order_by: title_count desc, end_year desc
    limit: 100
  }
  
  query: who_played is {
    where: principals.characters.value ~r'Batman'
    group_by: principals.people.primaryName
    aggregate: 
      title_count
      start_year is min(startYear)
      end_year is max(startYear)
    nest: top_titles_list is by_title
    order_by: end_year desc
    limit: 100
  }
  

  // Name: Top Titles
  query: top_titles is by_title + { limit: 20 } 

  // Name: Top 20 Horror Movies
  query: top_horror is  by_title + { 
    where: genres.value = 'Horror'
    limit: 20
  }

  // --
  // Name: Top Stars
  query: top_stars is by_name + { 
    limit: 20 
  } 

  // --
  // Name: Movie Stars Titles time and jobs
  query: top_stars2_dashboard is by_name + {
    nest: 
      by_title + { limit: 5}
      by_year_line_chart is by_year
      by_job_category
    limit: 20 
  } 

  query: search_index is {
    index: 
      genres.value, 
      principals.people.primaryName, 
      primaryTitle,
      principals.category,
      principals.characters.value 
      by total_ratings
  }
}

  // // --
  // // Name: Top Directors and their 5 best movies
  // query: movies->by_name + {
  //   where: principals.category = 'director'
  //   nest: by_title + { limit: 5}
  // }

  // // --
  // // Name: Top Comedy Directors and their 5 best movies
  // query: movies->by_name + {
  //   where: principals.category = 'director', genres.value = 'Comedy'
  //   nest: by_title + { limit: 5}
  // }

  // // s--
  // // // Name: by Genre, top movies, directors and actors
  // // query: movies-> by_genre + {
  // //   nest: by_title + { limit: 5}
  // //   nest: by_director is by_name + {
  // //     where: principals.category = 'director'
  // //     limit: 5
  // //   }
  // //   // nest: by_actor is by_name + {
  // //   //   where: principals.category ~ 'act%'
  // //   //   limit: 5
  // //   // }
  // // }

  // // -- 
  // // Name: Steven Spielberg Movies

  // query:  movies-> by_title + {
  //   where: principals.people.primaryName ~ r'Steven Spielberg'
  //   limit: 40
  // }


  // // -- 
  // // Name: People that work with Steven Spielberg 

  // // query for Steven Spielberg Movies.
  // query: speiberg_movies is movies->{
  //   where: principals.people.primaryName ~ r'Steven Spielberg'
  //   group_by: tconst, principals.people.nconst
  // }

  // // Query people limited to just steven spielber movies
  // query: movies -> by_name + {
  //   join_one: x is from(->speiberg_movies) on x.tconst=tconst
  //   where: x.tconst != null

  //   where: principals.people.nconst != x.nconst
  //   limit: 20
  //   order_by: title_count desc
  //   nest: by_job_list is by_job_category
  //   nest: title_list is by_title
  // }

  // // --
  // // Name: Horror Genre combinations

  // // Get a list of horror Movies
  // query: horror_movies is movies->{
  //   where: genres.value = 'Horror'
  //   group_by: tconst
  // }

  // // Horror combinations.
  // query: movies -> {
  //   join_one: x is from(->horror_movies) with tconst
  //   where: x.tconst != null

  //   group_by: genre_combo is concat('Horror + ', genres.value)
  //   aggregate: title_count, percent_of_titles
  //   nest: by_title is {
  //     group_by: primaryTitle, ratings.numVotes
  //     order_by: 2 desc
  //     limit: 10
  //   }
  // }

  // // --
  // // Name: Star Trek Dashboard

  // query: movies -> {   
  //   where: primaryTitle ~ r'Star Trek' and startYear < 2020
  //   nest: titles_dashboard
  // }

  // // --
  // // Name: Steven Spielberg Dashboard

  // query: speiberg_movies is movies->{
  //   where: principals.people.primaryName ~ r'Steven Spielberg'
  //   group_by: tconst
  // }

  // query: movies -> { 
  //   join_one: x is from(->speiberg_movies) with tconst
  //   where: x.tconst != null
  //   nest: titles_dashboard
  // }


  // // -- 
  // // Name: Tom Hanks explored

  // query: tom_hanks_movies is movies->{
  //   where: principals.people.primaryName ~ r'Tom Hanks'
  //   group_by: tconst
  // }
  // query: movies -> {
  //   join_one: x is from(-> tom_hanks_movies) with tconst
  //   where: x.tconst != null and startYear < 2010

  //   nest: tom_dashboard is {
  //     nest: works_with is by_name + {
  //       nest: by_role_list is by_job_category
  //       limit: 10
  //       order_by: 4 desc
  //     }
  //     nest: title_list_detail is  {
  //       group_by: primaryTitle, startYear
  //       order_by: 2 desc
  //     }
  //     nest: by_genre_bar_chart is {
  //       where: startYear != null
  //       group_by: genres.value
  //       aggregate: title_count
  //       aggregate: avg_year is startYear.avg()
  //     }
  //     nest: titles_dashboard
  //   }
  // }

  // // --
  // // Name: Genre matrix Top Movies

  // // Genre - Genre, by number of votes
  // query: movies + {
  //   join_many: x is from( movies-> {
  //     group_by: tconst, genres.value
  //   } ) on tconst = x.tconst
  // }
  // ->  {
  //   // where: genres.value != x.value
  //   group_by: genre1 is genres.value
  //   aggregate:  title_count
  //   nest: genre is {
  //     group_by: genre2 is x.value
  //     nest: by_title_list is {
  //       group_by: primaryTitle, ratings.numVotes
  //       order_by: 2 desc
  //       limit: 10
  //     }
  //   }
  // }


