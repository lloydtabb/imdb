import "imdb.malloy"

// --
// Name: Top Titles
query: movies->by_title + { limit: 20 } 

// Name: Top 20 Horror Movies
query: movies-> by_title + { 
  where: genres.value = 'Horror'
  limit: 20
}

// --
// Name: Top Stars
query: movies->by_name + { 
  limit: 20 
} 

// --
// Name: Top Comedy Stars
query: movies->by_name + { 
  where: genres.value = 'Comedy'
  limit: 20 
} 

// --
// Name: Movie Stars Titles time and jobs
query: movies-> {
  where: ratings.numVotes > 50000 
  nest: star_dashboard is by_name + { 
    nest: 
      by_title + { limit: 5}
      by_year_line_chart is by_year
      by_job_category
    limit: 20 
  }
} 

// --
// Name: Comedy Movie Stars Titles time and jobs
query: movies-> {
  where: genres.value = 'Comedy'
  nest: star_dashboard is by_name + { 
    nest: 
      by_title + { limit: 5}
      by_year_line_chart is by_year
      by_job_category
    limit: 20 
  }
} 


// --
// Name: Top Directors and their 5 best movies
query: movies->by_name + {
  where: principals.category = 'director'
  nest: by_title + { limit: 5}
}

// --
// Name: Top Comedy Directors and their 5 best movies
query: movies->by_name + {
  where: principals.category = 'director', genres.value = 'Comedy'
  nest: by_title + { limit: 5}
}

// s--
// // Name: by Genre, top movies, directors and actors
// query: movies-> by_genre + {
//   nest: by_title + { limit: 5}
//   nest: by_director is by_name + {
//     where: principals.category = 'director'
//     limit: 5
//   }
//   // nest: by_actor is by_name + {
//   //   where: principals.category ~ 'act%'
//   //   limit: 5
//   // }
// }

// -- 
// Name: Steven Spielberg Movies

query:  movies-> by_title + {
  where: principals.people.primaryName ~ r'Steven Spielberg'
  limit: 40
}


// -- 
// Name: People that work with Steven Spielberg 

// query for Steven Spielberg Movies.
query: speiberg_movies is movies->{
  where: principals.people.primaryName ~ r'Steven Spielberg'
  group_by: tconst, principals.people.nconst
}

// Query people limited to just steven spielber movies
query: movies -> by_name + {
  join_one: x is from(->speiberg_movies) on x.tconst=tconst
  where: x.tconst != null

  where: principals.people.nconst != x.nconst
  limit: 20
  order_by: title_count desc
  nest: by_job_list is by_job_category
  nest: title_list is by_title
}

// --
// Name: Horror Genre combinations

// Get a list of horror Movies
query: horror_movies is movies->{
  where: genres.value = 'Horror'
  group_by: tconst
}

// Horror combinations.
query: movies -> {
  join_one: x is from(->horror_movies) with tconst
  where: x.tconst != null

  group_by: genre_combo is concat('Horror + ', genres.value)
  aggregate: title_count, percent_of_titles
  nest: by_title is {
    group_by: primaryTitle, ratings.numVotes
    order_by: 2 desc
    limit: 10
  }
}

// --
// Name: Star Trek Dashboard

query: movies -> {   
  where: primaryTitle ~ r'Star Trek' and startYear < 2020
  nest: titles_dashboard
}

// --
// Name: Steven Spielberg Dashboard

query: speiberg_movies is movies->{
  where: principals.people.primaryName ~ r'Steven Spielberg'
  group_by: tconst
}

query: movies -> { 
  join_one: x is from(->speiberg_movies) with tconst
  where: x.tconst != null
  nest: titles_dashboard
}


// -- 
// Name: Tom Hanks explored

query: tom_hanks_movies is movies->{
  where: principals.people.primaryName ~ r'Tom Hanks'
  group_by: tconst
}
query: movies -> {
  join_one: x is from(-> tom_hanks_movies) with tconst
  where: x.tconst != null and startYear < 2010

  nest: tom_dashboard is {
    nest: works_with is by_name + {
      nest: by_role_list is by_job_category
      limit: 10
      order_by: 4 desc
    }
    nest: title_list_detail is  {
      group_by: primaryTitle, startYear
      order_by: 2 desc
    }
    nest: by_genre_bar_chart is {
      where: startYear != null
      group_by: genres.value
      aggregate: title_count
      aggregate: avg_year is startYear.avg()
    }
    nest: titles_dashboard
  }
}

// --
// Name: Genre matrix Top Movies

// Genre - Genre, by number of votes
query: movies + {
  join_many: x is from( movies-> {
    group_by: tconst, genres.value
  } ) on tconst = x.tconst
}
->  {
  // where: genres.value != x.value
  group_by: genre1 is genres.value
  aggregate:  title_count
  nest: genre is {
    group_by: genre2 is x.value
    nest: by_title_list is {
      group_by: primaryTitle, ratings.numVotes
      order_by: 2 desc
      limit: 10
    }
  }
}
