import "imdb.malloy"
// --
// Name: Question: Movie Titles after 2008
// List the titles of all movies 
//  released in 2008.
// Your query should output a table with a single column 
// for the title of each movie.


// --
// Name: Answer: Movie Titles after 2008
// List the titles of all movies 
//  released in 2008.
// Your query should output a table with a single column 
// for the title of each movie.
query: movies->{
  where: startYear = 2008
  project: primaryTitle
}

// --
// Name: Bonus: Movie Titles after 2008
//  just used the named query
query: movies {
  where: startYear = 2008
} -> by_title


// --
// Name: Question 2: When was Emma Stone Born?
// Write a query to determine the birth year of
//   Emma Stone.
// Your query should output a table with a single column and a 
//  single row (not including the header) containing Emma Stone’s
//   birth year.

// --
// Name: Answer: When was Emma Stone Born?
// Write a query to determine the birth year of
//   Emma Stone.
// Your query should output a table with a single column and a 
//  single row (not including the header) containing Emma Stone’s
//   birth year.

query: people -> {
  where: primaryName = 'Emma Stone'
  project: birthYear
}

// --
// Name: Question: Emma Stone Titles
// You may assume that there is only one person in the database 
//  with the name Emma Stone.
// Write a query to list the titles of all movies with
//   a release date on or after 2018, in alphabetical order.
// Your query should output a table with a single column for the 
//  title of each movie.

// --
// Name: Answer: Emma Stone Titles
// You may assume that there is only one person in the database 
//  with the name Emma Stone.
// Write a query to list the titles of all movies with
//   a release date on or after 2018, in alphabetical order.
// Your query should output a table with a single column for the 
//  title of each movie.
query: movies -> {
  where: principals.people.primaryName = 'Emma Stone' 
    and startYear >= 2018
  project: primaryTitle
  order_by: 1
}

// --
// Name: Malloy : Emma Stone Titles
// You may assume that there is only one person in the database 
//  with the name Emma Stone.
// Again, more simple in Malloy
query: movies{
  where: principals.people.primaryName = 'Emma Stone' 
    and startYear >= 2018
} -> by_title

// --
// Name: Question: Movies with 10 rating
// Movies released in 2018 should be included, as 
//  should movies with release dates in the future.
// Write a query to determine the number of movies with 
//  an IMDb rating of 10.0.
// Your query should output a table with a single 
//  column and a single row (not including the 
//  header) containing the number of movies with a 10.0 rating.

// --
// Name: Answer: Movies with 10 rating
// Movies released in 2018 should be included, as 
//  should movies with release dates in the future.
// Write a query to determine the number of movies with 
//  an IMDb rating of 10.0.
// Your query should output a table with a single 
//  column and a single row (not including the 
//  header) containing the number of movies with a 10.0 rating.

query: movies -> {
  where: ratings.averageRating = 10
  aggregate: title_count
}

// --
// Name: Malloy: Movies with 10 rating
// Movies released in 2018 should be included, as 
//  should movies with release dates in the future.
// Write a query to determine the number of movies with 
//  an IMDb rating of 10.0.
// Your query should output a table with a single 
//  column and a single row (not including the 
//  header) containing the number of movies with a 10.0 rating.

query: movies {
  where: ratings.averageRating = 10
} -> {
  aggregate: title_count
  nest: by_title
}

// --
// Name: Question: Harry Potter Movies
// Write a Query to list the titles and release years of 
//  all Harry Potter movies, in chronological order.
// Your query should output a table with two columns, one 
//  for the title of each movie and one for the release year
//   of each movie.
// You may assume that the title of all Harry Potter 
//  movies will begin with the words “Harry Potter”, 
//  and that if a movie title begins with the words 
//  “Harry Potter”, it is a Harry Potter movie.

// --
// Name: Answery: Harry Potter Movies
// Write a Query to list the titles and release years of 
//  all Harry Potter movies, in chronological order.
// Your query should output a table with two columns, one 
//  for the title of each movie and one for the release year
//   of each movie.
// You may assume that the title of all Harry Potter 
//  movies will begin with the words “Harry Potter”, 
//  and that if a movie title begins with the words 
//  “Harry Potter”, it is a Harry Potter movie.
query: movies -> {
  where: primaryTitle ~ 'Harry Potter%'
  project: primaryTitle, startYear
  order_by: 2
}

// --
// Name: Malloy: Harry Potter Movies
// Write a Query to list the titles and release years of 

query: movies {
  where: primaryTitle ~ 'Harry Potter%'
} -> by_title + {order_by: startYear}

// --
// Name: Question: Average Rating in 2012
// Write a query to determine the average rating of all movies 
//  released in 2012.
// Your query should output a table with a single column and 
//  a single row (not including the header) containing the
//   average rating.

// --
// Name: Answer: Average Rating in 2012
// Write a query to determine the average rating of all movies 
//  released in 2012.
// Your query should output a table with a single column and 
//  a single row (not including the header) containing the
//   average rating.
query: movies -> {
  where: startYear = 2012
  aggregate: average_rating is ratings.averageRating.avg()
}

// --
// Name: Question: Toy Story Who?
// Write a query to list the names of all people 
//  who starred in Toy Story.
// Your query should output a table with a single column for 
//  the name of each person. You may assume that there is only 
//  one movie in the database  with the title Toy Story.

// --
// Name: Answer: Toy Story Who?
// Write a query to list the names of all people 
//  who starred in Toy Story.
// Your query should output a table with a single column for 
//  the name of each person. You may assume that there is only 
//  one movie in the database  with the title Toy Story.
query: movies -> {
  where: primaryTitle = 'Toy Story'
  project: principals.people.primaryName
  order_by: 1
}

// --
// Name: Malloy: Toy Story Who?
// Write a query to list the names of all people 
//  who starred in Toy Story.
// Your query should output a table with a single column for 
//  the name of each person. You may assume that there is only 
//  one movie in the database  with the title Toy Story.
query: movies {
  where: primaryTitle = 'Toy Story'
} -> by_name

// --
// Name: Question: Who's Who 2004
// Write a query to list the names of all people who starred 
//  in a movie released in 2004, ordered by birth year.
// Your query should output a table with a single column 
//  for the name of each person.
// People with the same birth year may be listed in any order.
// No need to worry about people who have no birth year listed,
//  so long as those who do have a birth year are listed 
//  in order. If a person appeared in more than one movie in 2004, 
//  they should only appear in your results once.

// --
// Name: Answer: Who's Who 2004
// Write a query to list the names of all people who starred 
//  in a movie released in 2004, ordered by birth year.
// Your query should output a table with a single column 
//  for the name of each person.
// People with the same birth year may be listed in any order.
// No need to worry about people who have no birth year listed,
//  so long as those who do have a birth year are listed 
//  in order. If a person appeared in more than one movie in 2004, 
//  they should only appear in your results once.

query: movies -> {
  where: startYear = 2004
  group_by: 
    principals.people.primaryName 
    principals.people.birthYear
  order_by: 1
} 

// --
// Name: Malloy: Who's Who 2004
// Write a query to list the names of all people who starred 
//  in a movie released in 2004, ordered by birth year.

query: movies {
  where: startYear = 2004
} -> by_name + {
    group_by: principals.people.birthYear
    order_by: birthYear
}

// --
// Name: Question: High Directors
// Write  SQL query to list the names of all people who have 
//  directed a movie that received a rating of at least 9.0.
// Your query should output a table with a single column for
//   the name of each person. If a person directed more than 
//  one movie that received a rating of at least 9.0, they 
//  should only appear in your results once.

// --
// Name: Answer: High Directors
// Write  SQL query to list the names of all people who have 
//  directed a movie that received a rating of at least 9.0.
// Your query should output a table with a single column for
//   the name of each person. If a person directed more than 
//  one movie that received a rating of at least 9.0, they 
//  should only appear in your results once.

query: movies -> {
  where: ratings.averageRating >= 9
    and principals.category = 'director'
  group_by: 
    principals.people.primaryName 
}

// --
// Name: Bonus: High Directors
// Write  SQL query to list the names of all people who have 
//  directed a movie that received a rating of at least 9.0.
// Show their movies the year and the rating as a subtable

query: movies -> {
  where: ratings.averageRating >= 9
    and principals.category = 'director'
  group_by: 
    principals.people.primaryName 
  aggregate: title_count
  nest: by_title is {
    group_by: primaryTitle, startYear, ratings.averageRating
  }
}

// --
// Name: Question: Chadwick Boseman?
// Write a Query to list the titles of the five highest 
//  rated movies (in order) that Chadwick Boseman starred 
//  in, starting with the highest rated.
// Your query should output a table with a single column 
//  for the title of each movie.
// You may assume that there is only one person in the 
//  database with the name Chadwick Boseman.


// --
// Name: Answer: Chadwick Boseman?
// Write a Query to list the titles of the five highest 
//  rated movies (in order) that Chadwick Boseman starred 
//  in, starting with the highest rated.
// Your query should output a table with a single column 
//  for the title of each movie.
// You may assume that there is only one person in the 
//  database with the name Chadwick Boseman.
query: movies -> {
  where: principals.people.primaryName = 'Chadwick Boseman' 
  project: 
    primaryTitle
    ratings.averageRating
  order_by: 2 desc
  limit: 5
}

// --
// Name: Question: Johnny and Helena?
// Write a SQL query to list the titles of all
//  movies in which both Johnny Depp and Helena Bonham 
//  Carter starred.
// Your query should output a table with a single column 
//  for the title of each movie.
// You may assume that there is only one person in the 
//  database with the name Johnny Depp.
// You may assume that there is only one person in 
//  the database with the name Helena Bonham Carter.

// --
// Name: Answer: Johnny and Helena?
// Write a SQL query to list the titles of all
//  movies in which both Johnny Depp and Helena Bonham 
//  Carter starred.
// Your query should output a table with a single column 
//  for the title of each movie.
// You may assume that there is only one person in the 
//  database with the name Johnny Depp.
// You may assume that there is only one person in 
//  the database with the name Helena Bonham Carter.

query: johnnys_movies is movies ->{
  where: principals.people.primaryName = 'Johnny Depp'
  project: tconst
}

query: movies -> {
  join_one: x is from(->johnnys_movies) with tconst
  where: x.tconst != null
    and  principals.people.primaryName = 'Helena Bonham Carter'
  project: primaryTitle
}

// --
// Name: Question: One Degree of Kevin Bacon
// Write a SQL query to list the names of all people who 
//  starred in a movie in which Kevin Bacon also starred.
// Your query should output a table with a single column 
//  for the name of each person.
// There may be multiple people named Kevin Bacon in 
//  the database. Be sure to only select the Kevin Bacon 
//  born in 1958.
// Kevin Bacon himself should not be included in 
//  the resulting list.

// --
// Name: Answer: One Degree of Kevin Bacon
// Write a SQL query to list the names of all people who 
//  starred in a movie in which Kevin Bacon also starred.
// Your query should output a table with a single column 
//  for the name of each person.
// There may be multiple people named Kevin Bacon in 
//  the database. Be sure to only select the Kevin Bacon 
//  born in 1958.
// Kevin Bacon himself should not be included in 
//  the resulting list.

query: kevins_movies is movies ->{
  where: principals.people.primaryName = 'Kevin Bacon'
    and principals.people.birthYear = 1958
  project: tconst
}

query: movies -> {
  join_one: x is from(->kevins_movies) with tconst
  where: x.tconst != null
    and principals.people.primaryName != 'Kevin Bacon'
  group_by: principals.people.primaryName
  aggregate: title_count
}
